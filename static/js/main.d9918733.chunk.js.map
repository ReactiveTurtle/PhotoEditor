{"version":3,"sources":["button/Button.tsx","helper/CanvasHelper.tsx","structures/Type.tsx","edittext/EditText.tsx","selectsizepopup/SelectSizePopup.tsx","helper/DrawHelper.tsx","colorpicker/ColorPicker.tsx","tool/Tools.tsx","canvas/Canvas.tsx","App.tsx","statemanager/StateManager.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","class","onClick","text","createNewCanvas","editor","size","newCanvas","ImageData","x","y","data","fill","selectedObject","canvas","Types","EditText","id","type","min","defaultValue","placeholder","hintText","onChange","e","htmlFor","title","closeSelectSizePopup","popup","document","getElementById","classList","add","SelectSizePopup","useState","defaultPrevented","preventDefault","parseInt","target","value","setEditor","getEditor","drawObject","context","newImageData","Polygon","ctx","polygon","beginPath","moveTo","position","points","forEach","element","lineTo","length","fillStyle","fillColor","lineWidth","strokeWidth","strokeStyle","strokeColor","stroke","getImageData","drawPolygon","Circle","circle","arc","radius","Math","PI","drawCircle","Art","art","putImageData","image","drawArt","TextObject","font","color","fillText","drawText","undefined","Error","ColorPicker","input","objRTC","replaceSelectedObject","onchange","render","getFillColor","getStrokeColor","ToolType","Tools","onSelected","Rectangle","currentTool","setCurrentTool","useEffect","tool","Triangle","Text","renderCanvas","tempCanvasObject","getContext","width","height","drawBorder","setLineDash","normY","abs","Canvas","isCanvasDown","setCanvasDown","tempObject","setTempObject","start","setStart","onCreateObject","moveEnd","newObject","downStart","end","max","createRectangle","createTriangle","len","sqrt","pow","createCircle","onMouseDown","style","cursor","clientX","offsetLeft","clientY","offsetTop","pushHistory","onMouseMove","onMouseUp","App","listener","ctrlKey","console","log","code","mEditor","imageHistory","history","currentHistoryPosition","copyImageData","undo","newEditor","redo","window","addEventListener","removeEventListener","remove","toBlob","blob","url","URL","createObjectURL","Blob","link","createElement","href","setAttribute","body","appendChild","click","exportObject","pop","push","imageData","set","Uint8ClampedArray","newSelectedObject","ReactDOM","StrictMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.d9918733.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\ninterface ButtonProps {\r\n    text: string,\r\n    class?: string,\r\n    onClick: ((event: React.MouseEvent) => void)\r\n}\r\n\r\nfunction Button(props: ButtonProps) {\r\n    return (\r\n        <div className={\"Button\" + (props.class != null ? \" \" + props.class : \"\")}\r\n            onClick={props.onClick}>\r\n            {props.text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import { Editor } from '../structures/Editor'\r\nimport { Vector2 } from '../structures/Vector2'\r\n\r\nexport function copyImageData(imageData: ImageData) {\r\n\tconst newImageData: ImageData = new ImageData(\r\n\t\timageData.width,\r\n\t\timageData.height\r\n\t);\r\n\tnewImageData.data.set(new Uint8ClampedArray(imageData.data));\r\n\treturn newImageData;\r\n}\r\n\r\nexport function createNewCanvas(editor: Editor, size: Vector2): Editor {\r\n\tconst newCanvas = new ImageData(size.x, size.y);\r\n\tnewCanvas.data.fill(255);\r\n\tconst newEditor: Editor = {\r\n\t\t...editor,\r\n\t\tselectedObject: null,\r\n\t\tcanvas: newCanvas,\r\n\t};\r\n\treturn newEditor;\r\n}\r\n\r\nexport function exportObject() {\r\n\tvar canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n\tif (canvas == null) {\r\n\t\treturn;\r\n\t}\r\n\tcanvas.toBlob(\r\n\t\tfunction (blob) {\r\n\t\t\tif (blob == null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst url = window.URL.createObjectURL(new Blob([blob]));\r\n\t\t\tconst link = document.createElement(\"a\");\r\n\t\t\tlink.href = url;\r\n\t\t\tlink.setAttribute(\"download\", \"image.png\");\r\n\t\t\tdocument.body.appendChild(link);\r\n\t\t\tlink.click();\r\n\t\t\tlink.remove();\r\n\t\t},\r\n\t\t\"image/png\",\r\n\t\t0.9\r\n\t);\r\n}\r\n","export enum Types {\r\n    Art, Circle, Polygon, TextObject\r\n}","import React from 'react';\r\nimport { ChangeEvent } from \"react\";\r\nimport './EditText.css';\r\n\r\ninterface EditTextProps {\r\n    id?: string,\r\n    title: string,\r\n    text: string,\r\n    hintText?: string,\r\n    type: string,\r\n    onChange(e: ChangeEvent<HTMLInputElement>): void\r\n}\r\n\r\nexport default function EditText(props: EditTextProps) {\r\n    return (\r\n        <div className=\"EditText-input\">\r\n            <input\r\n                className=\"Number-input\"\r\n                id={props.id}\r\n                type={props.type}\r\n                min=\"1\"\r\n                defaultValue={props.text}\r\n                placeholder={props.hintText}\r\n                onChange={(e) => props.onChange(e)}></input>\r\n            <label className=\"Number-label\" htmlFor=\"newWidth\">{props.title}</label>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport Button from '../button/Button';\r\nimport './SelectSizePopup.css';\r\nimport '../index.css';\r\nimport { setEditor, getEditor } from '../statemanager/StateManager';\r\nimport { createNewCanvas } from '../helper/CanvasHelper';\r\nimport { Vector2 } from '../structures/Vector2';\r\nimport EditText from '../edittext/EditText';\r\n\r\nexport function closeSelectSizePopup() {\r\n    const popup = document.getElementById(\"SelectSizePopup-out\");\r\n    if (popup == null) {\r\n        return;\r\n    }\r\n    popup.classList.add(\"hidden\");\r\n}\r\n\r\nexport default function SelectSizePopup() {\r\n    const [size] = useState<Vector2>({ x: 600, y: 400 })\r\n    return (\r\n        <div className=\"SelectSizePopup-out hidden\"\r\n            id=\"SelectSizePopup-out\"\r\n            onClick={(e) => {\r\n                if (!e.defaultPrevented) {\r\n                    closeSelectSizePopup()\r\n                }\r\n            }}>\r\n            <div className=\"SelectSizePopup\"\r\n                onClick={(e) => {\r\n                    e.preventDefault();\r\n                }}>\r\n                <p className=\"SelectSizePopup-title\">Введите размер холста</p>\r\n                <EditText title=\"Ширина\"\r\n                    onChange={(e) => size.x = parseInt(e.target.value)}\r\n                    text={size.x + \"\"}\r\n                    type=\"number\"\r\n                    hintText=\"Введите число\"></EditText>\r\n                <EditText title=\"Высота\"\r\n                    onChange={(e) => size.y = parseInt(e.target.value)}\r\n                    text={size.y + \"\"}\r\n                    type=\"number\"\r\n                    hintText=\"Введите число\"></EditText>\r\n                <div className=\"SelectSizePopup-buttonWrapper\">\r\n                    <Button text=\"Создать\" onClick={() => {\r\n                        setEditor(createNewCanvas(getEditor(), size));\r\n                        closeSelectSizePopup();\r\n                    }}></Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { Art } from \"../structures/Art\";\r\nimport { Circle } from \"../structures/Circle\";\r\nimport { Polygon } from \"../structures/Polygon\";\r\nimport { TextObject } from \"../structures/TextObject\";\r\nimport { Types } from \"../structures/Type\";\r\nimport { Vector2 } from \"../structures/Vector2\";\r\n\r\nexport function drawObject(\r\n    context: CanvasRenderingContext2D,\r\n    size: Vector2,\r\n    selectedObject: TextObject | Polygon | Circle | Art\r\n) {\r\n    let newImageData: ImageData | undefined;\r\n\r\n    switch (selectedObject.type) {\r\n        case Types.Polygon:\r\n            newImageData = drawPolygon(context, size, selectedObject as Polygon);\r\n            break;\r\n        case Types.Circle:\r\n            newImageData = drawCircle(context, size, selectedObject as Circle);\r\n            break;\r\n        case Types.Art:\r\n            newImageData = drawArt(context, size, selectedObject as Art);\r\n            break;\r\n        case Types.TextObject:\r\n            newImageData = drawText(context, size, selectedObject as TextObject);\r\n            break;\r\n    };\r\n    if (newImageData === undefined) {\r\n        throw new Error();\r\n    }\r\n    return newImageData;\r\n}\r\n\r\nfunction drawPolygon(ctx: CanvasRenderingContext2D,\r\n    size: Vector2,\r\n    polygon: Polygon\r\n): ImageData | undefined {\r\n    ctx.beginPath();\r\n    ctx.moveTo(\r\n        polygon.position.x + polygon.points[0].x,\r\n        polygon.position.y + polygon.points[0].y);\r\n    polygon.points.forEach(element => {\r\n        ctx.lineTo(polygon.position.x + element.x,\r\n            polygon.position.y + element.y);\r\n    });\r\n    ctx.lineTo(\r\n        polygon.position.x + polygon.points[0].x,\r\n        polygon.position.y + polygon.points[0].y);\r\n    if (polygon.points.length > 1) {\r\n        ctx.lineTo(\r\n            polygon.position.x + polygon.points[1].x,\r\n            polygon.position.y + polygon.points[1].y);\r\n    }\r\n    ctx.fillStyle = polygon.fillColor;\r\n    ctx.fill();\r\n\r\n    ctx.beginPath();\r\n    ctx.lineWidth = polygon.strokeWidth;\r\n    ctx.moveTo(\r\n        polygon.position.x + polygon.points[0].x,\r\n        polygon.position.y + polygon.points[0].y);\r\n    polygon.points.forEach(element => {\r\n        ctx.lineTo(polygon.position.x + element.x,\r\n            polygon.position.y + element.y);\r\n    });\r\n    ctx.lineTo(\r\n        polygon.position.x + polygon.points[0].x,\r\n        polygon.position.y + polygon.points[0].y);\r\n    if (polygon.points.length > 1) {\r\n        ctx.lineTo(\r\n            polygon.position.x + polygon.points[1].x,\r\n            polygon.position.y + polygon.points[1].y);\r\n    }\r\n    ctx.strokeStyle = polygon.strokeColor;\r\n    ctx.stroke();\r\n    return ctx.getImageData(0, 0, size.x, size.y);\r\n}\r\n\r\nfunction drawCircle(ctx: CanvasRenderingContext2D,\r\n    size: Vector2,\r\n    circle: Circle) {\r\n    let strokeWidth = circle.strokeWidth / 2;\r\n    ctx.lineWidth = circle.strokeWidth;\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n        circle.position.x + circle.radius,\r\n        circle.position.y + circle.radius,\r\n        circle.radius + strokeWidth,\r\n        0,\r\n        2 * Math.PI,\r\n        false\r\n    );\r\n    ctx.strokeStyle = circle.strokeColor;\r\n    ctx.stroke();\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n        circle.position.x + circle.radius,\r\n        circle.position.y + circle.radius,\r\n        circle.radius,\r\n        0,\r\n        2 * Math.PI,\r\n        false\r\n    );\r\n    ctx.fillStyle = circle.fillColor;\r\n    ctx.fill();\r\n    return ctx.getImageData(0, 0, size.x, size.y);\r\n}\r\n\r\nfunction drawArt(ctx: CanvasRenderingContext2D,\r\n    size: Vector2,\r\n    art: Art) {\r\n    ctx.putImageData(art.image, art.position.x, art.position.y)\r\n    return ctx.getImageData(0, 0, size.x, size.y);\r\n}\r\n\r\nfunction drawText(ctx: CanvasRenderingContext2D,\r\n    size: Vector2,\r\n    text: TextObject) {\r\n    ctx.font = `${text.size.y}px monospace`;\r\n    ctx.fillStyle = text.color;\r\n    ctx.fillText(text.text, text.position.x, text.position.y, text.size.x);\r\n    return ctx.getImageData(0, 0, size.x, size.y);\r\n}","import React from 'react';\r\nimport EditText from '../edittext/EditText';\r\nimport { getEditor, render, replaceSelectedObject, setEditor } from '../statemanager/StateManager';\r\nimport { Circle } from '../structures/Circle';\r\nimport { Polygon } from '../structures/Polygon';\r\nimport { Types } from '../structures/Type';\r\nimport './ColorPicker.css';\r\n\r\nfunction ColorPicker() {\r\n    return (\r\n        <div className=\"ColorPicker\">\r\n            <div>\r\n                <EditText\r\n                    id=\"EditText-fill\"\r\n                    title=\"Цвет заливки\"\r\n                    text=\"#424242\"\r\n                    type=\"color\"\r\n                    onChange={(e) => {\r\n                        const input = e.target as HTMLInputElement;\r\n                        const editor = getEditor();\r\n                        const selectedObject = editor.selectedObject;\r\n                        if (selectedObject != null) {\r\n                            if (selectedObject.type === Types.Polygon\r\n                                || selectedObject.type === Types.Circle) {\r\n                                const objRTC: Polygon | Circle = selectedObject;\r\n                                objRTC.fillColor = input.value;\r\n                                editor.selectedObject = null;\r\n\r\n                                setEditor(editor);\r\n                                setEditor(replaceSelectedObject(objRTC));\r\n\r\n                                input.onchange = null;\r\n                                render();\r\n                            }\r\n                        }\r\n                    }}></EditText>\r\n                <EditText\r\n                    id=\"EditText-stroke\"\r\n                    title=\"Цвет контура\"\r\n                    text=\"#888888\"\r\n                    type=\"color\"\r\n                    onChange={(e) => {\r\n                        const input = e.target as HTMLInputElement;\r\n                        const editor = getEditor();\r\n                        const selectedObject = editor.selectedObject;\r\n                        if (selectedObject != null) {\r\n                            if (selectedObject.type === Types.Polygon\r\n                                || selectedObject.type === Types.Circle) {\r\n                                const objRTC: Polygon | Circle = selectedObject;\r\n                                objRTC.strokeColor = input.value;\r\n\r\n                                editor.selectedObject = null;\r\n                                setEditor(editor);\r\n                                \r\n                                setEditor(replaceSelectedObject(objRTC));\r\n                                input.onchange = null;\r\n                                render();\r\n                            }\r\n                        }\r\n                    }}></EditText>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ColorPicker;\r\n\r\nexport function getFillColor() {\r\n    const colorInput = document.getElementById(\"EditText-fill\") as HTMLInputElement;\r\n    return colorInput.value;\r\n}\r\n\r\nexport function getStrokeColor() {\r\n    const colorInput = document.getElementById(\"EditText-stroke\") as HTMLInputElement;\r\n    return colorInput.value;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from '../button/Button';\r\nimport { render } from '../statemanager/StateManager';\r\nimport './Tools.css';\r\n\r\nexport enum ToolType {\r\n    Rectangle = 0, Triangle = 1, Circle = 2, Text = 3\r\n}\r\n\r\ninterface ToolsProps {\r\n    onSelected(tool: ToolType): void\r\n}\r\n\r\nexport default function Tools({ onSelected }: ToolsProps) {\r\n    const [currentTool, setCurrentTool] = useState(ToolType.Rectangle);\r\n    useEffect(() => {\r\n        onSelected(currentTool);\r\n    }, [onSelected, currentTool])\r\n    const onClick = (tool: ToolType) => {\r\n        setCurrentTool(tool);\r\n        render();\r\n    };\r\n    return (\r\n        <div className=\"Tools-container\">\r\n            <Button text=\"Прямоугольник\"\r\n                class={currentTool === ToolType.Rectangle ? \"Tools-selected\" : \"Tools-default\"}\r\n                onClick={() => onClick(ToolType.Rectangle)}></Button>\r\n            <Button text=\"Треугольник\"\r\n                class={currentTool === ToolType.Triangle ? \"Tools-selected\" : \"Tools-default\"}\r\n                onClick={() => onClick(ToolType.Triangle)}></Button>\r\n            <Button text=\"Круг\"\r\n                class={currentTool === ToolType.Circle ? \"Tools-selected\" : \"Tools-default\"}\r\n                onClick={() => onClick(ToolType.Circle)}></Button>\r\n            <Button text=\"Текст\"\r\n                class={currentTool === ToolType.Text ? \"Tools-selected\" : \"Tools-default\"}\r\n                onClick={() => onClick(ToolType.Text)}></Button>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { drawObject } from '../helper/DrawHelper';\r\nimport { getEditor, pushHistory, replaceSelectedObject, setEditor } from '../statemanager/StateManager';\r\nimport { Polygon } from '../structures/Polygon';\r\nimport './Canvas.css';\r\nimport { Types } from '../structures/Type';\r\nimport { Vector2 } from '../structures/Vector2';\r\nimport { getFillColor, getStrokeColor } from '../colorpicker/ColorPicker';\r\nimport { ToolType } from '../tool/Tools';\r\nimport { Circle } from '../structures/Circle';\r\nimport { Art } from '../structures/Art';\r\nimport { TextObject } from '../structures/TextObject';\r\nimport { Editor } from '../structures/Editor';\r\n\r\ninterface CanvasProps {\r\n    tool: ToolType\r\n}\r\n\r\nfunction Canvas({ tool }: CanvasProps) {\r\n    const [isCanvasDown, setCanvasDown] = useState(false);\r\n    const [tempObject, setTempObject] = useState<Polygon | Circle | TextObject | Art | null>(null);\r\n    const [start, setStart] = useState<Vector2>({ x: 0, y: 0 });\r\n\r\n    const editor = getEditor();\r\n    useEffect(() => {\r\n        renderCanvas(getEditor(), tempObject);\r\n    }, [tempObject]);\r\n    const onCreateObject = (moveEnd: Vector2) => {\r\n        if (isCanvasDown) {\r\n            let newObject = null;\r\n            switch (tool) {\r\n                case ToolType.Rectangle:\r\n                    newObject = createRectangle(start, moveEnd);\r\n                    break;\r\n                case ToolType.Triangle:\r\n                    newObject = createTriangle(start, moveEnd);\r\n                    break;\r\n                case ToolType.Circle:\r\n                    newObject = createCircle(start, moveEnd);\r\n                    break;\r\n            }\r\n            setTempObject(newObject);\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"Canvas-container\">\r\n            <canvas id=\"canvas\"\r\n                className=\"Canvas\"\r\n                width={editor.canvas.width}\r\n                height={editor.canvas.height}\r\n                onMouseDown={(e) => {\r\n                    const canvas = e.target as HTMLCanvasElement;\r\n                    if (canvas.style.cursor === \"move\") {\r\n                        if (editor.selectedObject != null) {\r\n                            setStart({\r\n                                x: e.clientX - canvas.offsetLeft - editor.selectedObject.position.x,\r\n                                y: e.clientY - canvas.offsetTop - editor.selectedObject.position.y\r\n                            });\r\n                        }\r\n                    } else {\r\n                        if (getEditor().selectedObject != null) {\r\n                            setEditor(replaceSelectedObject(null));\r\n                            pushHistory(getEditor().canvas);\r\n                        }\r\n                        setStart({\r\n                            x: e.clientX - canvas.offsetLeft,\r\n                            y: e.clientY - canvas.offsetTop\r\n                        });\r\n                    }\r\n                    setCanvasDown(true);\r\n                }}\r\n                onMouseMove={(e) => {\r\n                    const canvas = e.target as HTMLCanvasElement;\r\n                    const moveEnd: Vector2 = {\r\n                        x: e.clientX - canvas.offsetLeft,\r\n                        y: e.clientY - canvas.offsetTop\r\n                    };\r\n                    if (isCanvasDown) {\r\n                        if (canvas.style.cursor === \"move\") {\r\n                            const editor = getEditor();\r\n                            if (editor.selectedObject != null) {\r\n                                editor.selectedObject.position = {\r\n                                    x: moveEnd.x - start.x,\r\n                                    y: moveEnd.y - start.y\r\n                                }\r\n                                setEditor(editor);\r\n                            }\r\n                        } else {\r\n                            onCreateObject(moveEnd);\r\n                        }\r\n                    } else {\r\n                        const selectedObject = getEditor().selectedObject;\r\n                        if (selectedObject != null) {\r\n                            const normY = Math.min(selectedObject.position.y + selectedObject.size.y, selectedObject.position.y);\r\n                            if (moveEnd.x >= selectedObject.position.x\r\n                                && moveEnd.x <= selectedObject.position.x + selectedObject.size.x\r\n                                && moveEnd.y >= normY\r\n                                && moveEnd.y <= normY + Math.abs(selectedObject.size.y)) {\r\n                                canvas.style.cursor = \"move\";\r\n                            } else {\r\n                                canvas.style.cursor = \"default\";\r\n                            }\r\n                        } else {\r\n                            canvas.style.cursor = \"default\";\r\n                        }\r\n                    }\r\n                }}\r\n                onMouseUp={(e) => {\r\n                    const canvas = e.target as HTMLCanvasElement;\r\n                    if (tempObject != null) {\r\n                        setEditor(replaceSelectedObject(tempObject));\r\n                        setTempObject(null);\r\n                    } else if (canvas.style.cursor === \"default\" && getEditor().selectedObject != null) {\r\n                        setEditor(replaceSelectedObject(tempObject));\r\n                        pushHistory(getEditor().canvas);\r\n                    }\r\n                    setCanvasDown(false);\r\n                }}>\r\n            </canvas>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport function renderCanvas(editor: Editor = getEditor(), tempCanvasObject: Polygon | Circle | TextObject | Art | null = null) {\r\n    const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n    if (canvas == null) {\r\n        return;\r\n    }\r\n    const context = canvas.getContext(\"2d\");\r\n    if (context != null) {\r\n        context.putImageData(editor.canvas, 0, 0);\r\n        if (editor.selectedObject != null) {\r\n            context.putImageData(drawObject(context, { x: canvas.width, y: canvas.height }, editor.selectedObject), 0, 0);\r\n            drawBorder(editor.selectedObject.position, editor.selectedObject.size, context);\r\n        }\r\n        if (tempCanvasObject != null) {\r\n            context.putImageData(drawObject(context, { x: canvas.width, y: canvas.height }, tempCanvasObject), 0, 0);\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawBorder(position: Vector2, size: Vector2, ctx: CanvasRenderingContext2D) {\r\n    ctx.setLineDash([15, 20]);\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 5;\r\n    const normY = Math.min(position.y + size.y, position.y);\r\n    ctx.moveTo(\r\n        position.x - ctx.lineWidth,\r\n        normY - ctx.lineWidth);\r\n    ctx.lineTo(\r\n        position.x + size.x + ctx.lineWidth,\r\n        normY - ctx.lineWidth);\r\n    ctx.lineTo(\r\n        position.x + size.x + ctx.lineWidth,\r\n        normY + Math.abs(size.y) + ctx.lineWidth);\r\n    ctx.lineTo(\r\n        position.x - ctx.lineWidth,\r\n        normY + Math.abs(size.y) + ctx.lineWidth);\r\n    ctx.lineTo(\r\n        position.x - ctx.lineWidth,\r\n        normY - ctx.lineWidth);\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = \"#888\";\r\n    ctx.stroke();\r\n    ctx.setLineDash([]);\r\n}\r\n\r\nexport default Canvas;\r\n\r\nfunction createRectangle(downStart: Vector2, moveEnd: Vector2): Polygon {\r\n    const start: Vector2 = {\r\n        x: Math.min(downStart.x, moveEnd.x),\r\n        y: Math.min(downStart.y, moveEnd.y)\r\n    };\r\n    const end = {\r\n        x: Math.max(downStart.x, moveEnd.x),\r\n        y: Math.max(downStart.y, moveEnd.y)\r\n    };\r\n    return {\r\n        type: Types.Polygon,\r\n        position: start,\r\n        size: {\r\n            x: end.x - start.x,\r\n            y: end.y - start.y\r\n        },\r\n        points: [\r\n            { x: 0, y: 0 },\r\n            { x: end.x - start.x, y: 0 },\r\n            { x: end.x - start.x, y: end.y - start.y },\r\n            { x: 0, y: end.y - start.y }],\r\n        fillColor: getFillColor(),\r\n        strokeColor: getStrokeColor(),\r\n        strokeWidth: 4\r\n    }\r\n}\r\n\r\nfunction createTriangle(downStart: Vector2, moveEnd: Vector2): Polygon {\r\n    const start: Vector2 = {\r\n        x: Math.min(downStart.x, moveEnd.x),\r\n        y: downStart.y\r\n    };\r\n    const end = {\r\n        x: Math.max(downStart.x, moveEnd.x),\r\n        y: moveEnd.y\r\n    };\r\n    return {\r\n        type: Types.Polygon,\r\n        position: start,\r\n        size: {\r\n            x: end.x - start.x,\r\n            y: end.y - start.y\r\n        },\r\n        points: [\r\n            { x: 0, y: 0 },\r\n            { x: end.x - start.x, y: 0 },\r\n            { x: (end.x - start.x) / 2, y: end.y - start.y }],\r\n        fillColor: getFillColor(),\r\n        strokeColor: getStrokeColor(),\r\n        strokeWidth: 4\r\n    }\r\n}\r\n\r\nfunction createCircle(downStart: Vector2, moveEnd: Vector2): Circle {\r\n    const len = Math.sqrt(Math.pow(moveEnd.x - downStart.x, 2) + Math.pow(moveEnd.y - downStart.y, 2));\r\n    return {\r\n        type: Types.Circle,\r\n        position: {\r\n            x: downStart.x - len,\r\n            y: downStart.y - len\r\n        },\r\n        size: {\r\n            x: len * 2,\r\n            y: len * 2\r\n        },\r\n        radius: len,\r\n        fillColor: getFillColor(),\r\n        strokeColor: getStrokeColor(),\r\n        strokeWidth: 4\r\n    }\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport SelectSizePopup from './selectsizepopup/SelectSizePopup';\nimport Button from './button/Button';\nimport Canvas from './canvas/Canvas';\nimport ColorPicker from './colorpicker/ColorPicker';\nimport { exportObject } from './helper/CanvasHelper';\nimport './structures/Vector2';\nimport Tools, { ToolType } from './tool/Tools';\nimport { redo, setEditor, undo } from './statemanager/StateManager';\n\nfunction App() {\n    const [currentTool, setCurrentTool] = useState(ToolType.Rectangle);\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.ctrlKey) {\n                console.log(e.code);\n                if (e.code === \"KeyZ\") {\n                    setEditor(undo());\n                } else if (e.code === \"KeyB\") {\n                    setEditor(redo());\n                }\n            }\n        }\n        window.addEventListener(\"keypress\", listener)\n        return () => {\n            window.removeEventListener(\"keypress\", listener);\n        }\n    })\n    return (\n        <div className=\"App\"\n            id=\"App\">\n            <Canvas tool={currentTool}></Canvas>\n            <div className=\"App-scrollContent\">\n                <header className=\"App-header\">\n                    <Button text=\"Создать\" onClick={() => {\n                        const popup = document.getElementById(\"SelectSizePopup-out\");\n                        if (popup == null) {\n                            return;\n                        }\n                        console.log(\"click\");\n                        popup.classList.remove(\"hidden\");\n                    }}></Button>\n                    <Button text=\"Импорт\" onClick={() => { }}></Button>\n                    <Button text=\"Сохранить\" onClick={() => { exportObject() }}></Button>\n                </header>\n                <Tools onSelected={(tool) => {\n                    setCurrentTool(tool);\n                }}></Tools>\n            </div>\n            <ColorPicker></ColorPicker>\n            <SelectSizePopup></SelectSizePopup>\n        </div>\n    );\n}\n\nexport default App;\n","import { Editor } from '../structures/Editor'\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../index.css';\r\nimport App from '../App';\r\nimport { TextObject } from '../structures/TextObject';\r\nimport { Circle } from '../structures/Circle';\r\nimport { Art } from '../structures/Art';\r\nimport { drawObject } from '../helper/DrawHelper';\r\nimport { Polygon } from '../structures/Polygon';\r\nimport { renderCanvas } from '../canvas/Canvas';\r\nimport { ImageHistory } from '../structures/ImageHistory';\r\n\r\nconst imageHistory: ImageHistory = {\r\n    history: [],\r\n    currentHistoryPosition: 0\r\n};\r\n\r\nexport function pushHistory(canvas: ImageData) {\r\n    while (imageHistory.currentHistoryPosition < imageHistory.history.length - 1) {\r\n        imageHistory.history.pop();\r\n    }\r\n    if (imageHistory.currentHistoryPosition === imageHistory.history.length - 1) {\r\n        imageHistory.currentHistoryPosition++;\r\n    }\r\n    imageHistory.history.push(canvas);\r\n}\r\n\r\nlet mEditor: Editor = {\r\n    selectedObject: null,\r\n    canvas: new ImageData(600, 400)\r\n};\r\n\r\n\r\nexport function setEditor(editor: Editor): void {\r\n    mEditor = editor;\r\n    console.log(imageHistory.history.length + \", \" + imageHistory.currentHistoryPosition);\r\n    renderCanvas();\r\n}\r\n\r\nfunction copyImageData(imageData: ImageData) {\r\n    const newImageData: ImageData = new ImageData(\r\n        imageData.width,\r\n        imageData.height\r\n    );\r\n    newImageData.data.set(new Uint8ClampedArray(imageData.data));\r\n    return newImageData;\r\n}\r\n\r\nexport function getEditor(): Editor {\r\n    return {\r\n        selectedObject: mEditor.selectedObject,\r\n        canvas: copyImageData(mEditor.canvas),\r\n    };\r\n}\r\n\r\nexport function replaceSelectedObject(\r\n    newSelectedObject: TextObject | Polygon | Circle | Art | null\r\n) {\r\n    let newEditor: Editor = {\r\n        ...mEditor,\r\n        selectedObject: newSelectedObject,\r\n    };\r\n    if (mEditor.selectedObject != null) {\r\n        const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n        if (canvas != null) {\r\n            const ctx = canvas.getContext(\"2d\");\r\n            if (ctx != null) {\r\n                ctx.putImageData(mEditor.canvas, 0, 0);\r\n                newEditor.canvas = drawObject(ctx,\r\n                    { x: mEditor.canvas.width, y: mEditor.canvas.height },\r\n                    mEditor.selectedObject);\r\n            }\r\n        }\r\n    }\r\n    return newEditor;\r\n}\r\n\r\nexport function render() {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <App />\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nexport function undo() {\r\n    let newCanvas: ImageData = mEditor.canvas;\r\n    if (imageHistory.history.length > 0) {\r\n        if (imageHistory.currentHistoryPosition > 0 || mEditor.selectedObject != null) {\r\n            if (mEditor.selectedObject == null) {\r\n                imageHistory.currentHistoryPosition--;\r\n            } else {\r\n                const editor = replaceSelectedObject(null);\r\n                pushHistory(editor.canvas);\r\n                imageHistory.currentHistoryPosition--;\r\n                setEditor(editor);\r\n            }\r\n            newCanvas = copyImageData(\r\n                imageHistory.history[imageHistory.currentHistoryPosition]\r\n            );\r\n        }\r\n    }\r\n    const newEditor: Editor = {\r\n        ...mEditor,\r\n        canvas: newCanvas\r\n    };\r\n    return newEditor;\r\n}\r\n\r\nexport function redo() {\r\n    const newEditor: Editor = {\r\n        ...mEditor,\r\n    };\r\n    if (imageHistory.history.length > 0) {\r\n        if (imageHistory.currentHistoryPosition < imageHistory.history.length - 1) {\r\n            imageHistory.currentHistoryPosition++;\r\n            newEditor.canvas = copyImageData(\r\n                imageHistory.history[imageHistory.currentHistoryPosition]\r\n            );\r\n        }\r\n    }\r\n    return newEditor;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { getEditor, pushHistory, render, setEditor } from './statemanager/StateManager'\nimport reportWebVitals from './reportWebVitals';\nimport { createNewCanvas } from './helper/CanvasHelper';\n\nsetEditor(createNewCanvas(getEditor(), { x: 400, y: 600 }));\npushHistory(getEditor().canvas);\nrender();\n\nreportWebVitals();\n"],"sourceRoot":""}